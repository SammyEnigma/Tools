###########################################################################
## my.cnf for MySQL 8.4（LTS）
## 本配置参考：
##      https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html
##      https://dev.mysql.com/doc/refman/8.4/en/replication-options-binary-log.html
##      https://dev.mysql.com/doc/refman/8.4/en/replication-options-replica.html
##      https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html
##      https://blog.csdn.net/gzt19881123/article/details/109511245
## 注意：
##   (1)本配置假设物理服务器内存为8G，预计并发连接数1000，总表数量在512之内，
##      能基本满足中小型企业业务
##   (2)本人不对这些建议结果负相应责任 ，仅作参考
###########################################################################

[mysql]
prompt = "\u@mysqldb \R:\m:\s [\d]> "
no_auto_rehash
loose-skip-binary-as-hex

###########################################################################
## 服务端参数配置
###########################################################################
[mysqld]
user	= mysql
port	= 3306

#主从复制或MGR集群中，server_id记得要不同。另外，实例启动时会生成auto.cnf，里面的server_uuid值也要不同。server_uuid的值还可以自己手动指定，只要符合uuid的格式标准就可以。
server_id = 1000

#数据库默认字符集, 主流字符集支持一些特殊表情符号（特殊表情符占用4个字节）
character_set_server = utf8mb4
#数据库字符集对应一些排序等规则，注意要和character-set-server对应
collation-server = utf8mb4_unicode_ci
#设置client连接mysql时的字符集，防止乱码
init-connect='SET NAMES utf8mb4'

#是否对sql语句大小写敏感，1表示不敏感
lower_case_table_names = 1

#设置sql模式，sql_mode模式引起的分组查询出现'this is incompatible with sql_mode=only_full_group_by'，这里最好剔除ONLY_FULL_GROUP_BY
#sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION

#只能用IP地址检查客户端的登录，不用主机名
skip_name_resolve = 1
#若你的MySQL数据库主要运行在境外，请务必根据实际情况调整本参数
default_time_zone = "+8:00"
#启用admin_port，连接数爆满等紧急情况下给管理员留个后门
admin_address = '127.0.0.1'
admin_port = 33062

###########################-- performance setttings 开始 --###########################
#Metadata Lock最大时长（秒），一般用于控制alter操作的最大时长（sine mysql5.6）。执行DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞
#默认值：31536000秒（一年）
#Scope：Global, Session
lock_wait_timeout = 3600

#该选项控制着mysqld进程能使用的最大文件描述(FD)符数量。需要注意的是这个变量的值并不一定是你设定的值，mysqld会在系统允许的情况下尽量获取更多的FD数量
#默认值：5000, with possible adjustment
#Scope：Global
#注：实际观测到系统取值1048576，因此注释掉该设置值
#open_files_limit = 65535

#在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中。官方建议back_log = 50 + (max_connections / 5)，封顶数为65535，默认值 = max_connections
#默认值：-1 (signifies autosizing; do not assign this literal value)
#Scope：Global
back_log = 1024

#指定MySQL允许的最大连接数。如果在访问数据库时经常出现"Too Many Connections"的错误提示，则需要增大该参数值。
#默认值：151
#Scope：Global
max_connections = 1000

#如果某个用户发起的连接error超过该数值，则该用户的下次连接将被阻塞，直到管理员执行flush hosts;命令或者服务重启。非法的密码以及其他在连接时的错误会增加此值。
#默认值：100
#Scope：Global
max_connect_errors = 1000

#The number of open tables for all threads
#指导原则：
#1. 可以通过检查Opened_tables状态变量来检查是否需要增加表缓存。如果Opened_tables的值很大且您不经常使用FLUSH TABLES(强制所有表关闭并重新打开)，那么您应该增加table_open_cache变量的值。
#默认值：4000
#Scope：Global
table_open_cache = 4000

#The number of table definitions that can be stored in the definition cache: MIN(400 + table_open_cache / 2, 2000)
#默认值：-1 (signifies autosizing; do not assign this literal value)
#Scope：Global
#table_definition_cache = 1024

#每个线程的堆栈大小 如果线程堆栈太小，则会限制执行复杂SQL语句
#指导原则：
#1. 如果线程堆栈大小太小，将限制服务器可以处理的 SQL 语句的复杂性、存储过程的递归深度和其他内存消耗的操作。
#默认值：1048576Bytes（1M）
#Scope：Global
thread_stack = 512K

#服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小(当与大的BLOB字段一起工作时相当必要)，对于某些客户端，如果通信信息包过大，在执行查询期间，可能会遇到“丢失与 MySQL 服务器的连接”错误。
#默认值：67108864Bytes（64M）
#Scope：Global, Session（The session value of this variable is read only）
max_allowed_packet = 64M

#order by或group by时用到
#指导原则：
#1. If you see many 'Sort_merge_passes' per second in 'SHOW GLOBAL STATUS' output, you can consider increasing the 'sort_buffer_size' value to speed up ORDER BY or GROUP BY operations that cannot be improved with query optimization or improved indexing.
#2. Setting it larger than required globally slows down most queries that perform sorts. It is best to increase it as a session setting, and only for the sessions that need a larger size.
#3. On Linux, there are thresholds of 256KB and 2MB where larger values may significantly slow down memory allocation, so you should consider staying below one of those values.
#默认值：262144Bytes（256KB）
#Scope：Global, Session
sort_buffer_size = 262144

#inner、left、right join时用到
#指导原则：
#1. Normally, the best way to get fast joins is to add indexes. Increase the value of 'join_buffer_size' to get a faster full join when adding indexes is not possible.
#2. It is better to keep the global setting small and change the session setting to a larger value only in sessions that are doing large joins, or change the setting on a per-query basis by using a 'SET_VAR' optimizer hint. 
#3. Memory allocation time can cause substantial performance drops if the global size is larger than needed by most queries that use it.
#默认值：262144Bytes（256KB）
#Scope：Global, Session
join_buffer_size = 262144

#对MyISAM表起作用，但是内部的临时磁盘表是MyISAM表，也要使用该值。例如大表order by、缓存嵌套查询、大容量插入分区。
#指导原则：
#1. If you do many sequential scans, you might want to increase this value.
#2. The value of this variable should be a multiple of 4KB.
#默认值：131072Bytes（128KB）
#Scope：Global, Session
read_buffer_size = 8M

#This variable is used for reads from MyISAM tables, and, for any storage engine, for Multi-Range Read optimization.
#指导原则：
#1. Setting the variable to a large value can improve ORDER BY performance by a lot. However, this is a buffer allocated for each client, so you should not set the global variable to a large value. Instead, change the session variable only from within those clients that need to run large queries.
#默认值：262144Bytes（256KB）
#Scope：Global, Session
read_rnd_buffer_size = 4M

#对MyISAM表起作用，插入优化
#指导原则：
#1. Setting the session value of this system variable is a restricted operation. The session user must have privileges sufficient to set restricted session variables.
#默认值：8388608Bytes（8M）
#Scope：Global, Session
bulk_insert_buffer_size = 64M

#How many threads the server should cache for reuse.
#指导原则：
#1. This variable can be increased to improve performance if you have a lot of new connections.
#2. Normally, this does not provide a notable performance improvement if you have a good thread implementation.
#3. However, if your server sees hundreds of connections per second you should normally set thread_cache_size high enough so that most new connections use cached threads.
#4. By examining the difference between the 'Connections' and 'Threads_created' status variables, you can see how efficient the thread cache is.
#默认值：-1 (signifies autosizing; do not assign this literal value)，默认值的计算 = 8 + (max_connections / 100)
#Scope：Global
#thread_cache_size = 1500

#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭。MySQL默认的wait_timeout值为8个小时, interactive_timeout参数需要同时配置才能生效
#默认值：28800（秒）
#Scope：Global, Session
interactive_timeout = 28800

#The number of seconds the server waits for activity on a noninteractive connection before closing it.
#默认值：28800（秒）
#Scope：Global, Session
wait_timeout = 28800

#内部内存临时表的最大值。比如大数据量的group by ,order by时可能用到临时表，超过了这个值将写入磁盘，系统IO压力增大
#指导原则：
#1. Increase the value of tmp_table_size if you do many advanced GROUP BY queries and you have lots of memory.
#默认值：16777216Bytes（16M）
#Scope：Global, Session
tmp_table_size = 32M

#配合tmp_table_size一起使用
#默认值：16777216Bytes（16M）
#Scope：Global, Session
max_heap_table_size = 32M
###########################-- performance setttings 结束 --###########################

###########################-- log settings 开始 --###########################
#该变量控制错误日志、一般查询日志和慢查询日志中时间戳的时区。可选值：UTC, SYSTEM
#默认值：UTC
#Scope：Global
log_timestamps = SYSTEM

log_error = /var/log/mysql-error.log

#指定错误日志的详细程度。可选值：1：ERROR 2：ERROR, WARNING 3：ERROR, WARNING, INFORMATION
#默认值：2
#Scope：Global
log_error_verbosity = 3

#是否启用慢查询日志
#默认值：0 OFF
#Scope：Global
slow_query_log = 1

#如果慢查询日志启用并且输出目标包括FILE，服务器将写入额外字段到日志文件行，以提供关于慢语句的信息。
#默认值：0 OFF
#Scope：Global
log_slow_extra = 1

slow_query_log_file = /var/log/mysql-slow.log

#慢查询执行的秒数，必须达到此值才会被记录
#指导原则：
#1. very small values should be used in test environments only, or, in production environments, only for a short period.
#2. mysqldump performs a full table scan, which means its queries can often exceed a 'long_query_time' setting that is useful for regular queries. If you want to exclude most or all of the queries generated by mysqldump from the slow query log, you can use --mysqld-long-query-time.
#默认值：10秒
#Scope：Global, Session
long_query_time = 5

#如果启用该变量并启用慢查询日志，预计检索所有行的查询将被记录。该选项并不一定意味着没有使用索引。例如，使用完整索引扫描的查询使用了索引，但仍将被记录。
#默认值：0 OFF
#Scope：Global
log_queries_not_using_indexes = 1

#配合'log_queries_not_using_indexes'一起使用，设定每分钟记录到日志的未使用索引的语句数目，超过这个数目后只记录语句数量和花费的总时间
#默认值：0（A value of 0 means “no limit”）
#Scope：Global
log_throttle_queries_not_using_indexes = 60

#对于查询扫描行数小于此参数的SQL，将不会记录到慢查询日志中
#默认值：0
#Scope：Global, Session
min_examined_row_limit = 1000

#记录执行缓慢的管理类SQL，如alter table, analyze table, check table, create index, drop index, optimize table, repair table等。  
log_slow_admin_statements = 1
###########################-- log settings 结束 --###########################

###########################-- binlog settings 开始 --###########################
#设置binlog format。可选值：STATEMENT, ROW, MIXED
#指导原则：
#1. binlog_format选项已弃用，并将在未来版本的MySQL中删除。这意味着支持除基于行的日志记录外的其他日志格式也将在未来版本中删除。因此，新的MySQL复制设置应该仅使用基于行的日志记录。
#默认值：ROW
#Scope：Global, Session
binlog_format = ROW

#控制MySQL服务器将二进制日志同步到磁盘的频率。可选值：0, 1, N
#指导原则：
#1. For the greatest possible durability and consistency in a replication setup that uses InnoDB with transactions, use these settings: sync_binlog=1 && innodb_flush_log_at_trx_commit=1
#默认值：1
#Scope：Global
sync_binlog = 1 #MGR环境中由其他节点提供容错性，可不设置双1以提高本地节点性能

#The size of the memory buffer to hold changes to the binary log during a transaction
#指导原则：
#1. When binary logging is enabled on the server, a binary log cache is allocated for each client if the server supports any transactional storage engines.
#2. If you often use large transactions, you can increase this cache size to get better performance by reducing or eliminating the need to write to temporary files.
#3. The 'Binlog_cache_use' and 'Binlog_cache_disk_use' status variables can be useful for tuning the size of this variable.
#默认值：32768Bytes（32KB）
#Scope：Global
binlog_cache_size = 1M

#binlog能够使用的最大cache内存大小
#默认值：64位系统上非常大（也因此还是加上限制比较好），32位系统上4G
#Scope：Global
max_binlog_cache_size = 2G

#单个binlog文件大小
#指导原则：
#1. 如果'max_relay_log_size'为0，则'max_binlog_size'的值也适用于中继日志。
#默认值：1073741824Bytes（1G）
#Scope：Global
max_binlog_size = 1G

#该系统变量仅影响基于行的日志记录。当启用时，它会导致服务器将信息性日志事件（如行查询日志事件）写入其二进制日志中。这些信息可以用于调试和相关目的，例如在源上无法重构原始查询时获取原始查询。
#默认值：0 OFF
#Scope：Global, Session
binlog_rows_query_log_events = 1

#binlog日志保存的天数
#默认值：2592000秒（30天）
#Scope：Global
binlog_expire_logs_seconds = 604800

#启用该变量时，源将为二进制日志中的每个事件写入校验和。可选值：NONE（禁用校验和），CRC32。当禁用时，服务器通过写入和检查每个事件的长度（而不是校验和）来验证它是否写入完整的事件到二进制日志。
#默认值：CRC32
#Scope：Global
binlog_checksum = CRC32

#开启GTID复制模式。可选值：OFF, OFF_PERMISSIVE, ON_PERMISSIVE, ON。记录的事务可以是匿名的，也可以使用GTID。匿名事务依赖于二进制日志文件和位置来标识特定事务。GTID事务具有唯一的标识符，用于引用事务。
#指导原则：
#1. 您必须拥有足够的权限来设置该变量，'enforce_gtid_consistency'必须设置为ON，然后才能设置gtid_mode=ON。
#默认值：OFF
#Scope：Global
gtid_mode = ON

#配合'gtid_mode'使用。可选值：OFF, ON, WARN。设置为ON即不允许任何事务违反GTID一致性。
#指导原则：
#1. 'enforce_gtid_consistency' must be set to ON before you can set gtid_mode=ON
#2. gtid一致性意味着包含了CREATE TEMPORARY TABLE或DROP TEMPORARY TABLE，又或者包含了CREATE TABLE ... SELECT语句的事务将不被支持
#默认值：OFF
#Scope：Global
enforce_gtid_consistency = ON

#对于binlog_format=ROW模式时，该参数确定行的哪些信息被写入binlog。可选值：full（记录所有列）、minimal（仅记录更改的列和用于标识行的列）、noblob（记录所有列，除了不必要的BLOB和TEXT列）
#如果设置为MINIMAL，则会减少记录日志的内容，只记录受影响的列，但对于部分update无法flashBack
#默认值：full
#Scope：Global, Session
binlog_row_image = full
###########################-- binlog settings 结束 --###########################

###########################-- myisam settings 开始 --###########################
#对MyISAM表起作用，但是内部的临时磁盘表是MyISAM表，也要使用该值。
#指导原则：
#1. 您可以通过发出SHOW STATUS语句并检查'Key_read_requests'、'Key_reads'、'Key_write_requests'和'Key_writes'状态变量来检查键缓存的性能。
#默认值：8388608（8M）
#Scope：Global
key_buffer_size = 32M

#The size of the buffer that is allocated when sorting MyISAM indexes during a REPAIR TABLE or when creating indexes with CREATE INDEX or ALTER TABLE.
#默认值：8388608（8M）
#Scope：Global
myisam_sort_buffer_size = 32M
###########################-- myisam settings 结束 --###########################

###########################-- replication settings 开始 --###########################
#作为从库时，如果启用了该变量，将在服务器启动后立即启用中继日志恢复过程。
#默认值：0 OFF
#Scope：Global
#relay_log_recovery = 1

#启用replica的多线程复制，并设置执行复制事务的并行线程数。
#默认值：4
#Scope：Global
#replica_parallel_workers = 4 #可以设置为逻辑CPU数量的2倍

#启用replica的线程复制的情况下，将该选项设置为ON以确保事务在replica上执行和提交的顺序与其在replica的中继日志中的顺序相同。
#默认值：1 ON
#Scope：Global
#replica_preserve_commit_order = 1

#启用replica多线程复制的情况下，设置经过多少时间（以毫秒为单位）调用检查点操作来更新replica状态（通过SHOW REPLICA STATUS查看到的）
#默认值：300毫秒
#Scope：Global
#replica_checkpoint_period = 300

#使用共享锁，并避免不必要的锁获取，以提高半同步复制的性能。
#指导原则：
#1. 建议在replicas数量较多的情况下开启此选项
#默认值：0 OFF
#Scope：Global
#replication_optimize_for_static_plugin_config = OFF

#限制回调以提高半同步复制的性能。
#指导原则：
#1. 建议在replicas数量较多的情况下开启此选项
#默认值：0 OFF
#Scope：Global
#replication_sender_observe_commit_only = OFF

#loss-less semi-sync replication settings
#skip_replica_start #tells the replica server not to start the replication I/O (receiver) and SQL (applier) threads when the server starts. To start the threads later, use a START REPLICA statement.

#同时启用半同步复制的master和slave plugin
#semi-sync(master)
#控制source等待来自replica的确认的时间长度
#默认值：10000毫秒
#Scope：Global
#loose-rpl_semi_sync_source_timeout = 99999999

#loose-plugin_load = "rpl_semi_sync_source=semisync_source.so;rpl_semi_sync_replica=semisync_replica.so"

#控制是否在source上启用半同步复制
#默认值：0 OFF
#Scope：Global
#loose-rpl_semi_sync_source_enabled = 1

#设置source在每个事务中必须收到多少个replica的确认返回才能继续执行。
#默认值：1
#Scope：Global
#loose-rpl_semi_sync_source_wait_for_replica_count = 1

#控制半同步复制source服务器在客户端提交事务后等待replica确认事务接收的点。可选值：AFTER_SYNC, AFTER_COMMIT
#默认值：AFTER_SYNC
#Scope：Global
#loose-rpl_semi_sync_source_wait_point = AFTER_SYNC

#semi-sync(slave)
#控制是否在replica上启用半同步复制。
#默认值：0 OFF
#Scope：Global
#loose-rpl_semi_sync_replica_enabled = 1

#如果是slave节点，强烈建议设置为read_only模式，避免误操作写入数据
#如果是master节点，则不要设置为read_only模式
#read_only = 1
#super_read_only = 1
###########################-- replication settings 结束 --###########################

###########################-- InnoDB settings 开始 --###########################
#事务隔离级别。可选值：	READ-UNCOMMITTED(未提交读), READ-COMMITTED(已提交读), REPEATABLE-READ(可重复读), SERIALIZABLE(可串行化)
#默认值：REPEATABLE-READ（可重复读）
#Scope：Global, Session
transaction_isolation = REPEATABLE-READ

#缓冲池的大小
#指导原则：
#1. 一般设置物理存储的 60% ~ 80%（专用数据库服务器上）
#默认值：134217728Bytes（128M）
#Scope：Global
innodb_buffer_pool_size = 128M

#将InnoDB缓冲池分成的区域数。对于缓冲池大小在多GB范围内的系统，将缓冲池分成多个实例可以提高并发性，方法是减少对缓存页面的争用。每个缓存页面都被随机分配到一个缓冲池实例中，使用哈希函数。
#指导原则：
#1. The total buffer pool size is divided among all the buffer pools. For best efficiency, specify a combination of 'innodb_buffer_pool_instances' and 'innodb_buffer_pool_size' so that each buffer pool instance is at least 1GB.
#默认值：8 (或 1，如果innodb_buffer_pool_size < 1GB)
#Scope：Global
innodb_buffer_pool_instances = 1

#同前sync_binlog。可选值：0, 1, 2
#默认值：1
#Scope：Global
innodb_flush_log_at_trx_commit = 1 #MGR环境中由其他节点提供容错性，可不设置双1以提高本地节点性能

#The size in bytes of the buffer that InnoDB uses to write to the log files on disk. 
#指导原则：
#1. A large log buffer enables large transactions to run without the need to write the log to disk before the transactions commit. Thus, if you have transactions that update, insert, or delete many rows, making the log buffer larger saves disk I/O. 
#默认值：67108864Bytes（64M）
#Scope：Global
innodb_log_buffer_size = 64M

#InnoDB日志文件组中每一个文件的大小
#默认值：50331648Bytes（48M）
#Scope：Global
innodb_log_file_size = 48M #如果线上环境的TPS较高，建议加大至1G以上，如果压力不大可以调小

#日志组中的日志文件数。InnoDB按照循环方式写入这些文件。默认（也是推荐的）值是 2。
#默认值：2
#Scope：Global
innodb_log_files_in_group = 2

#该变量取代了'innodb_log_files_in_group'和'innodb_log_file_size'变量。计算规则为：innodb_redo_log_capacity = innodb_log_files_in_group * innodb_log_file_size
#指导原则：
#1. 当该选项被设置时'innodb_log_files_in_group'和'innodb_log_file_size'设置的值将被忽略
#默认值：104857600（100M）
#Scope：Global
#loose-innodb_redo_log_capacity = 100M

#定义了撤销日志表空间的阈值大小
#默认值：1073741824（1G）
#Scope：Global
innodb_max_undo_log_size = 1G

#defines the number of I/O operations per second (IOPS) available to InnoDB background tasks
#指导原则：
#1. 根据您的服务器IOPS能力适当调整。一般配普通SSD盘的话，可以调整到10000 - 20000。配置高端PCIe SSD卡的话，则可以调整的更高，比如50000 - 80000
#默认值：10000
#Scope：Global
innodb_io_capacity = 10000

#If flushing activity falls behind, InnoDB can flush more aggressively, at a higher rate of I/O operations per second (IOPS) than defined by the 'innodb_io_capacity' variable. 
#默认值：2 * innodb_io_capacity
#Scope：Global
#innodb_io_capacity_max = 8000

#定义了将数据刷新到InnoDB数据文件和日志文件的方法，这可能会影响I/O吞吐量。可选值：fsync, O_DSYNC, littlesync, nosync, O_DIRECT, O_DIRECT_NO_FSYNC(Unix, 8.3.0), unbuffered, normal(Windows)
#默认值：fsync(Unix, 8.3.0), unbuffered(Windows)
#Scope：Global
#innodb_flush_method = fsync

#影响InnoDB缓冲池刷新操作的算法和启发式方法的参数。主要对性能专家调整I/O密集型工作负载感兴趣。它指定每个缓冲池实例中，page cleaner线程扫描查找脏页以刷新的深度。
#默认值：1024
#Scope：Global
#innodb_lru_scan_depth = 1024

#InnoDB事务等待行锁的时间长度（以秒为单位），在等待行锁时，InnoDB事务最多等待这么长时间。如果超时，当前语句将回滚（不是整个事务）。当有试图访问被另一行锁定的行的事务InnoDB事务在发出以下错误：'ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction'
#默认值：50秒
#Scope：Global, Session
innodb_lock_wait_timeout = 50

#开启该选项以便事务超时时InnoDB中止并回滚整个事务（默认情况下InnoDB仅在事务超时时回滚最后一条语句）。
#默认值：0 OFF
#Scope：Global
innodb_rollback_on_timeout = 1

#启用该选项时，InnoDB用户事务中的所有死锁信息将被记录在mysqld错误日志中。否则，只显示最后一个死锁信息（使用SHOW ENGINE INNODB STATUS命令）。
#默认值：0 OFF
#Scope：Global
innodb_print_all_deadlocks = 1

#指定在线DDL操作期间临时日志文件的最大大小。该日志文件用于存储在DDL操作期间插入、更新或删除的数据。如果临时日志文件超过最大大小限制，DDL操作将失败，并回滚所有未提交的并发DML操作。
#默认值：134217728Bytes（128M）
#Scope：Global
innodb_online_alter_log_max_size = 134217728

#启用该选项时，MySQL将DDL日志写入stderr。
#默认值：0 OFF
#Scope：Global
#innodb_print_ddl_logs = OFF

#该变量定义了在在线DDL操作期间记录并发DML时临时日志文件的扩展量，以及临时日志文件读取缓冲区和写入缓冲区的大小。
#默认值：1048576Bytes（1M）
#Scope：Global
innodb_sort_buffer_size = 64M

#采样索引页的数量，以估算基数和其他统计信息，例如ANALYZE TABLE计算的统计信息。
#指导原则：
#1. 增加该值可以提高索引统计信息的准确性，从而改进查询执行计划，但是在执行ANALYZE TABLE时会增加I/O操作。
#默认值：20
#Scope：Global
innodb_stats_persistent_sample_pages = 200
###########################-- InnoDB settings 结束 --###########################

[mysqldump]
quick